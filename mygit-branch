#!/usr/bin/env python3

import sys
import os

from utils import (
    COMMITS_DIR,
    BRANCHES_DIR,
    HEAD_FILE,
    preflight_checks,
    error,
    clean_args,
    read_head,
    get_commit_number_for_branch,
    is_valid_branch,
    is_valid_branch_name,
)

from tree import (
    find_lowest_common_ancestor
)


def _list_branches() -> None:
    """
    Generates and prints a sorted list of the branches available
    """
    os.makedirs(BRANCHES_DIR, exist_ok=True)
    branches = sorted(os.listdir(BRANCHES_DIR))
    for b in branches:
        print(b)


def _delete_branch(branch: str) -> None:
    """
    For a given branch name, delete it gracefully, unless there is an error.

    Args:
        branch (str): The name of the branch attempting to be deleted
    """
    if branch == "trunk":
        error("mygit-branch: error: can not delete branch 'trunk': default branch")
    if branch == read_head():
        error(
            f"mygit-branch: error: can not delete branch '{branch}': current branch")

    if not is_valid_branch(branch):
        error(f"mygit-branch: error: branch '{branch}' doesn't exist")

    current_branch = read_head()
    branch_commit = int(get_commit_number_for_branch(branch, prefix="branch"))
    current_commit = int(get_commit_number_for_branch(
        current_branch, prefix="branch"))

    # Unmerged changes should block deletion
    lca = find_lowest_common_ancestor(branch_commit, current_commit)
    if lca != branch_commit:
        error(f"mygit-branch: error: branch '{branch}' has unmerged changes")

    # Actual delete logic
    branch_path = os.path.join(BRANCHES_DIR, branch)
    os.remove(branch_path)
    print(f"Deleted branch '{branch}'")


if __name__ == "__main__":
    preflight_checks("branch")
    args = clean_args(
        "usage: mygit-branch [-d] <branch>", sys.argv[1:], params=["-d"])

    if not os.listdir(COMMITS_DIR):
        error(
            "mygit-branch: error: this command can not be run until after the first commit")

    # Case of printing branch names
    if len(args) == 0:
        _list_branches()
        sys.exit(0)

    delete_mode = "-d" in args
    branch = next((arg for arg in args if arg != "-d"), None)

    # Sanitising things... tedious
    if delete_mode:
        if branch is None:
            error("mygit-branch: error: branch name required")
        if len(args) != 2:
            error("usage: mygit-branch [-d] <branch>")

    if not delete_mode and len(args) != 1:
        error("usage: mygit-branch [-d] <branch>")

    if not is_valid_branch_name(branch):
        error(f"mygit-branch: error: invalid branch name '{branch}'")

    os.makedirs(BRANCHES_DIR, exist_ok=True)

    # Main logic
    if delete_mode:
        _delete_branch(branch)
    else:
        branch_path = os.path.join(BRANCHES_DIR, branch)
        if os.path.exists(branch_path):
            error(f"mygit-branch: error: branch '{branch}' already exists")

        current_branch = open(HEAD_FILE).read().strip()
        latest_commit = open(os.path.join(
            BRANCHES_DIR, current_branch)).read().strip()
        with open(branch_path, "w") as f:
            f.write(latest_commit)
