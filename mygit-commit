#!/usr/bin/env python3

# ============================================================
#   COMP2041 ASSIGNMENT 2 SUBMISSION | mygit-commit
#   Stephen Lerantges (z5319858)
#   Term 2, 2024
# ============================================================

import sys

from utils import (
    error,
    preflight_checks,
    load_index,
    create_commit,
    autostage_index,
    save_index,
)

# Commits are stored in a compressed way, because why not?
# Artifact of me trying to copy the reference implementation... Decided to keep it.
if __name__ == "__main__":
    preflight_checks("commit")
    args = sys.argv[1:]

    if len(args) not in [2, 3]:
        error("usage: mygit-commit [-a] -m commit-message")

    # If it cannot successfully get the message because either:
    # - "-m" is not in the args
    # - There aren't enough args for a message
    try:
        message = args[args.index("-m") + 1]
    except:
        error("usage: mygit-commit [-a] -m commit-message")

    if "-m" not in args or args.count("-m") != 1:
        error("usage: mygit-commit [-a] -m commit-message")

    try:
        message = args[args.index("-m") + 1]
    except IndexError:
        error("usage: mygit-commit [-a] -m commit-message")

    if len(args) not in [2, 3] or (len(args) == 3 and "-a" not in args):
        error("usage: mygit-commit [-a] -m commit-message")

    if "-a" in args:
        autostage_index()

    index = load_index()
    new_commit_number = create_commit(index, message)

    if new_commit_number is not None:
        save_index(index)

    if new_commit_number == None:
        print("nothing to commit")
    else:
        print(f"Committed as commit {new_commit_number}")
